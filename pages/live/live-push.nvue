<template>
	<view>
		<live-pusher id='livePusher' ref="livePusher" class="livePusher" url="rtmp://212.129.235.182:1935/live/2020"
		        mode="SD" :muted="false" :enable-camera="true" :auto-focus="true" :beauty="beauty" :whiteness="whiteness"
		        aspect="9:16" :style="{height:this.$store.state.windowsHeight+'px'}" @statechange="statechange" @netstatus="netstatus" @error = "error">
		</live-pusher>
		<cover-view class="sets">
			<cover-view class="set-item" @click="switchCamera">
				<cover-image class="set-img img-1" src="../../static/img/live/switch.png"></cover-image>
				<text class="set-title">转换</text>
			</cover-view>
			<cover-view class="set-item" @click="beBeauty">
				<cover-image class="set-img img-2" :src="beautySrc"></cover-image>
				<text class="set-title" :style="{color:isBeautify?'#007AFF':'#ffffff'}">美颜</text>
			</cover-view>
			<cover-view class="set-item" @click="beWhite">
				<cover-image class="set-img img-3" :src="whiteSrc"></cover-image>
				<text class="set-title" :style="{color:isWhite?'#007AFF':'#ffffff'}">美白</text>
			</cover-view>
		</cover-view>
		<cover-view class="bottomList">

		</cover-view>
		        <button class="btn" @click="start">开始推流</button>
		        <button class="btn" @click="pause">暂停推流</button>
		        <button class="btn" @click="resume">resume</button>
		        <button class="btn" @click="stop">停止推流</button>
		        <button class="btn" @click="snapshot">快照</button>
		        <button class="btn" @click="startPreview">开启摄像头预览</button>
		        <button class="btn" @click="stopPreview">关闭摄像头预览</button>
		        <button class="btn" @click="switchCamera">切换摄像头</button>
	</view>
</template>

<script>
    export default {
        data: {
             fil: true,
			 beauty:0,	//美颜
			 whiteness:0  ,//美白
			 isBeautify:false,
			 isWhite:false,	 
        },
		computed:{
			beautySrc:function(){
				let selected = "../../static/img/live/beautyselected.png";
				let unSelsected = "../../static/img/live/beauty.png";
				return (this.isBeautify ? selected : unSelsected);
			},
			whiteSrc:function(){
				let selected = "../../static/img/live/whiteselected.png";
				let unSelsected = "../../static/img/live/whiteness.png";
				return (this.isWhite ? selected : unSelsected);
			}
		},
        onReady() {
            // 注意：需要在onReady中 或 onLoad 延时
            this.context = uni.createLivePusherContext("livePusher", this);
			this.$store.commit('getWindowsHeight');
			console.log("当前页面高度"+this.$store.state.windowsHeight);
			
        },
        methods: {
				statechange(e) {
				    console.log("statechange:" + JSON.stringify(e));
				},
				netstatus(e) {
				    console.log("netstatus:" + JSON.stringify(e));
				},
				error(e) {
				    console.log("error:" + JSON.stringify(e));
				},
				start: function() {
				    this.context.start({
				        success: (a) => {
				            console.log("livePusher.start:" + JSON.stringify(a));
				        }
				    });
				},
				close: function() {
				    this.context.close({
				        success: (a) => {
				            console.log("livePusher.close:" + JSON.stringify(a));
				        }
				    });
				},
				snapshot: function() {
				    this.context.snapshot({
				        success: (e) => {
				            console.log(JSON.stringify(e));
				        }
				    });
				},
				resume: function() {
				    this.context.resume({
				        success: (a) => {
				            console.log("livePusher.resume:" + JSON.stringify(a));
				        }
				    });
				},
				pause: function() {
				    this.context.pause({
				        success: (a) => {
				            console.log("livePusher.pause:" + JSON.stringify(a));
				        }
				    });
				},
				stop: function() {
				    this.context.stop({
				        success: (a) => {
				            console.log(JSON.stringify(a));
				        }
				    });
				},
				switchCamera: function() {
				    this.context.switchCamera({
				        success: (a) => {
				            console.log("livePusher.switchCamera:" + JSON.stringify(a));
				        }
				    });
				},
				startPreview: function() {
				    this.context.startPreview({
				        success: (a) => {
				            console.log("livePusher.startPreview:" + JSON.stringify(a));
				        }
				    });
				},
				stopPreview: function() {
				    this.context.stopPreview({
				        success: (a) => {
				            console.log("livePusher.stopPreview:" + JSON.stringify(a));
				        }
				    });
				},
				
				//切换美颜0/1，并切换class
				beBeauty:function(){
					if(this.beauty == 0){
						this.beauty = 1;
					}
					else if(this.beauty == 1){
						this.beauty = 0;
					}
					this.isBeautify = !this.isBeautify;
				},
				
				//切换美白0/1，并切换class
				beWhite:function(){
					if(this.whiteness == 0){
						this.whiteness = 1;
					}
					else if(this.whiteness == 1){
						this.whiteness = 0;
					}
					this.isWhite = !this.isWhite;
				}
				
                    
        }
    }
</script>

<style>
	.livePusher{
		width: 750rpx;		
	}
	.sets{
		position: absolute;
		top: 130px;
		right: 20rpx;
	}
	.set-item{
		margin-bottom: 13px;
	}
	.set-img{
		width: 50rpx;
		height: 50rpx;
	}
	.img-3{
		width: 55rpx;
		height: 55rpx;
	}
	.set-title{
		color: #ffffff;
		font-size: 14px;
	}

</style>
